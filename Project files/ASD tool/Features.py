# -*- coding: utf-8 -*-
"""StartEndFrequency.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yKJv3SOHVW33nKLkOJ5i8y8zMeleYpsb
"""


import numpy as np
import numpy.matlib
import pandas as pd
import xlrd
import os
import librosa
import librosa.display
from scipy import signal
from scipy.signal import butter, lfilter, freqz
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.colors import ListedColormap
from scipy.signal import find_peaks
import math
import tensorflow as tf


"""ISI_time:"""
def ISI_time(rec_numSyl,startSyl,endSyl):
  ISI = []
  for i in range(len(rec_numSyl)):
    if rec_numSyl[i] == rec_numSyl[i-1]:
      ISI.append(startSyl[i] - endSyl[i-1])
    else:
      ISI.append(np.NaN)
  return ISI
  

"""Start End frequency:"""

def StartEndFreq(SignalVec,siz,mother,name,age,session,rec_num,motherSyl,nameSyl,ageSyl,sessionSyl,rec_numSyl,startSyl,endSyl,rate):
  StartEndFrec = []
  startF = []
  endF = []
  for s2 in range(siz):
    StartEndFrec = []
    for i in range(len(motherSyl)):
      if (mother[s2] == motherSyl[i]) and (name[s2] == nameSyl[i]) and (age[s2] == ageSyl[i]) and (session[s2] == sessionSyl[i]) and (rec_num[s2] == rec_numSyl[i]):
        st1 = round(startSyl[i]*rate)-1000
        if st1<0:
          st1 = 0
        f1, Pxx_den1 = signal.welch(SignalVec[s2][st1:st1+2000], rate, nperseg=1024, noverlap=625)
        st2 = round(endSyl[i]*rate)-1000
        f2, Pxx_den2 = signal.welch(SignalVec[s2][st2:st2+2000], rate, nperseg=1024, noverlap=625)
        k1 = np.where(f1>40000)
        peaksInd1, _ = find_peaks(Pxx_den1[k1[0][0]:-1])
        peaks1 = Pxx_den1[peaksInd1+k1[0][0]]
        is_empty = len(peaks1) == 0
        if (is_empty):
          StartEndFrec.append([0,0])
          startF.append(0)
          endF.append(0)
          continue
        peakMax1 = np.argmax(peaks1)
        frec1 = f1[peaksInd1[peakMax1]+k1[0][0]]
        k2 = np.where(f2>40000)
        peaksInd2, _ = find_peaks(Pxx_den2[k2[0][0]:-1])
        peaks2 = Pxx_den2[peaksInd2+k2[0][0]]
        peakMax2 = np.argmax(peaks2)
        frec2 = f2[peaksInd2[peakMax2]+k2[0][0]]   
        StartEndFrec.append([f1[peaksInd1[peakMax1]+k1[0][0]],f2[peaksInd2[peakMax2]+k2[0][0]]])
        startF.append(f1[peaksInd1[peakMax1]+k1[0][0]])
        endF.append(f2[peaksInd2[peakMax2]+k2[0][0]])
  return startF, endF


